name: Pull Request Validation

on:
  pull_request:
    branches:
      - "**"

jobs:
  build-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: builder

      - name: Configure AWS Credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          aws-access-key-id: ${{secrets.ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.SECRET_ACCESS_KEY}}

      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com
          ecr: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Modify config for build
        run: |
          cd runner
          # Create backup of original config
          cp config/default.js config/default.js.backup

          # Comment out lines 71-76 (Redis configuration)
          sed -i '71,76s/^/\/\/ /' config/default.js

          # Verify the changes
          echo "Modified config (lines 71-76):"
          sed -n '71,76p' config/default.js

      - name: Validate build configuration
        uses: docker/build-push-action@v6
        with:
          call: check
          context: ./builder
          file: ./builder/runner/Dockerfile

      # Cache the image layers for faster rebuilds
      - name: Build and cache
        uses: docker/build-push-action@v4
        with:
          push: false
          load: true
          tags: user/app:test
          context: ./builder
          file: ./builder/runner/Dockerfile
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Quick runtime test in same job
      - name: Quick runtime test
        run: |
          # Start container with timeout
          timeout 60s docker run --rm -d --name quick-test -p 8080:8080 user/app:test || true

          # Quick checks
          sleep 10

          if docker ps | grep quick-test; then
            echo "✅ Container started successfully"
            
            # Check for critical errors only
            if docker logs quick-test 2>&1 | grep -i "fatal\|panic"; then
              echo "❌ Critical errors found"
              docker logs quick-test 2>&1
              docker stop quick-test
              exit 1
            fi
            
            docker stop quick-test
          else
            echo "❌ Container failed to start or exited"
            docker logs quick-test 2>&1 || true
            exit 1
          fi
